User Guide for MD 6.2.0
===============================================================================


Definitions of Run Parameters
---------------------------------------------
The parameters defining the simulation must be in a file called 'runmd.in'.
Here is a list of all run parameters, and default values. Parameters that start
with "n" are time step counters, which cause various things to happen at the
given interval of time steps. Generally, if a counter is set to zero, the task
is never performed.

   tstart -- start time (fm/c)

   dt -- time step (fm/c)

   nwgroup - number of warmup groups. (default: 0)
     Every warmup group consists of nwsteps warmup steps (see below). Tempera-
     ture normalization is done after every warmup group.  A trick to use to
     normalize temperature just once per run, is to to set nwgroup=1 and
     nwsteps=0. This will cause 1 warmup group to be performed, but with no
     warmup steps. A temperature normalization will be performed once at the
     end of the group, but no timesteps have been performed.

   nwsteps - number of warmup steps per warmup group. (default: 0)
     The system is advanced this number of steps every warmup group, but no
     measurements are performed. This saves the time it takes to do potential
     energy measurements. Also, one usuallly does not want measurement data
     polluted by measurements taken before the system comes to equilibrium.

   ngroup - number of measurement groups. (default: 0)
     Each group consists of ntot measurements
     (see below). Mean and second moment are computed for each group, and then a
     block mean and second moment are calculated at the end of the run. This
     provides better statistics than just computing the mean and second moment of
     ngroup*ntot measurements all as one set.

   ntot   - number of measurements per measurement group. (default: 0)

   nind   - number of timesteps between measurements. (default: 0)
     This should be large enough to ensure the measurements are uncorrelated. The
     measurements are average potential and kinetic energies per particle, and
     instantaneous pressure. The pressure is calculated from the set value of kT
     and from the virial.

   nptensor - number of timesteps between pressure tensor measurements. (default: 0)
     The pressure tensor may be desired more frequently than other measurements,
     which is why this parameter can be set independetnly of nind. The ideal gas
     part of the pressure tensor is calculated from velocities rather than from
     the set value of kT. At equilbrium the pressure should be the average of the
     three diagonal components of the pressure tensor, but the two values can
     differ significantly for systems out of equilibrium.
     

   istep  - This is not a run parameter, but rather a counter that is updated by
     the program after each timestep is completed. A timestep consists of the
     following:
        subtraction of center-of-mass velocity, if mod(ncom,istep)==0
        temperature normalization, if mod(tnormalize,istep)=0
        call to subroutine newton, to compute accelerations and update velocity
             and position.

   ncom  - number of steps between center-of-mass velocity cancellations. (default: 0)

   ntnorm  - the number of steps between temperature normalizations during the
     measurement phase of a run (default: 0). If ntorm=0, temperature normaliza-
     tion will not be done. The run will then be carried out in the microcanonical
     ensemble. Note that if there is warmup phase (specified by nwgroup and nwsteps)
     both center-mass-motion cancellation and temperature normalization will be
     done at the end of each warmup group, regardless of the setting of ntnorm.
 
 
 
The following parameters control output of configurations.

   nckpt  --  number of time steps between checkpoints (default: 0). The program
              does not do a true checkpoint, i.e., you cannot really just restart
              a run from the checkpoint file alone. True checkpoint/restart will
              be implemented at some future date, if it really becomes necessary.
              The checkpoint file is really just an xv8b file.

   nout   --  number of time steps between configuration output (default: 0)

   ftype  --  type of configuration file to output. This output is in addtion
              to the checkpoint files. The valid types of configuration files
              are listed in the filetype list.

   append --  whether to append all configurations to a single trajectory file
              .true.  = append all configs to a single md.traj file (default)
              .false. = each config goes to its own md.out file
 
 
 
  sim_type - simulation type. (default: blank)
      This is a character string defining the type of simulation you want to do.
      The program can do either 'ion' or 'nucleon' simulations. An external uniform
      magnetic field in the z-direction can also be turned on for each type by
      setting the bfield parameter to some non-zero value. See description of
      bfield below. We now describe the 'ion' and 'nucleon' simulation types
      further.

     'ion'
       This is for either single ion or ion mixture simulations, also known as
       one component plasmas and multicomponent plasmas. Charges and masses can
       be specified either directly in the runmd file, via the spec_list parameter,
       or in a file, via the spec_file parameter. A spec_list is simply a list of
       N (number of ions), Z and A. For example, an MCP consisting of 6000 carbon
       ions and 4000 oxygen ions could be specified by,

          spec_list =
             6000,  6,  12,
             4000,  8,  16,

       This same format is used in the ZAfb type of spec_file, except that for
       the file you must put the total number of ions on the first line, as in,

            10000
             6000,  6,  12
             4000,  8,  16

       There is also a ZAfa type of spec_file, which is the old ion-file used
       in previous versions.

     'nucleon'
       For nucleon simulations, you specify the number of neutrons and protons
       the same way as for an ion simulation. The only meaningful values of Z
       and A are (Z,A)=(0,1) for neutrons and (1,1) for protons; however, the
       program does not check if you mistakenly use other values. As an example,
       if you want to run a nuclear pasta simulation using 32000 neutrons and
       8000 protons, you could specify a spec_list directly in the runmd file:

           spec_list
             32000,   0,   1,
              8000,   1,   1,
       
     'B-field'
       For simulations with only a uniform magnetic field in the z-direction.
       All particle interactions are turned off. This is probably useful only
       for testing.


  start --  This is a character string telling how to construct the initial con-
      figuration. There is no default value. There are three types of starts:

      start='random' -- This instructs the program to construct a random config-
         uration by randomly scattering particles in the simulation volume. Vel-
         ocities will be initialized according to a Maxwell distribution corre-
         sponding to temperature kT.

      start='nuclear' -- This instructs the program to generate random positions
         inside a sphere of radius rmax (another runmd parameter, see below).
         Velocities will again be assigned according to a Maxwell distribution.

      start='<filename>' -- To restart from a previous configuration, set start
         to the name of the configuration file. A restart file can be any of the
         file types listed in the file type list. If the file does not contain
         velocities, they will be assigned according to a Maxwell distribution
         corresponding to temperature kT.


  rmax -- radius of sphere for start='nuclear'. (default: 0.0)
     This is used only if istart='nuclear'.



The following parameters are used to select and initialize a random number gener-
ator. An RNG is needed only to set up an initial configuration or velocities,
which is only when istart='random', 'nuclear', or a configuratino file that does
not contain velocities.

  irnd -- selects random number generator (no default value)

  iseed -- seed for RNG (no default value)


Charges and masses of the particles are defined in one of two ways, either by a
species file, or a species list. These are parameters spec_file and spec_list in
runmd.in.

  spec_file -- This is a file containing the number of particles, charge and mass
    of each type. The file can start with any number of comment lines, which must
    begin with a '#' as the first character. The first non-comment line must be
    the total number of particles in the system (an integer). Following that come
    lines in the format

      ni, zi, ai,

    where ni is the number of particles (an integer) of type i, and zi and ai are
    their charge and mass. The chage and mass can be either integer or floating
    point numbers.

  spec_list -- This is a list of the same information as in a spec_file, except it
    appears directly in the run parameter file (the runmd.in file). Comments lines
    are not allowed. Also, you do not include a line with the total number of part-
    icles. The program figures this out by adding up the ni.

Note that you can also specify neutrons and protons by this same method, since
neutrons have charge 0 and protons have charge 1. For example, a system of 8000
neutrons and 2000 protons would be specified in the runmd.in file by entering the
lines

  8000,  0,  1,
  2000,  1,  1,

Internally, the program distinguishes between a one-component plasma and a multi-
component plasma when doing ion simulations. There are different interaction rou-
tines for the two types. Since all particles in an OCP have the same charge and
mass, the force calculation routines can be optimized somewhat to take advantage
of this. The program will notice if all ions have the same charge and mass, and
select the OCP routines during runtime.

There are several other parameters that can be set to describe the system.

  rho -- particle number density (1/fm^3) (default: 0.0)
    Note that some types of configuration files contain the simulation box dimen-
    sions and number of particles embedded in the file, in a header. For these
    files, rho will be calculated from this information and override any value
    given in the runmd file.

  kT-- temperature (MeV) (default: 0.0 MeV)

  aspect(1:3) -- array of three elements defining aspect ratio of simulation box
    edges (default: 1.0, 1.0, 1.0).  Note that some types of configuration files
    contain the simulation box dimensions and number of particles embedded in the
    file, in a header. For these files, rho will be calculated from this informa-
    tion and override any value given in the runmd file.

  rccut -- cutoff radius for the screened Coulomb interaction (default: 1.0d50)
     The default value of 1.0d50 really means infinity, i.e., no cutoff.

  rncut -- cutoff radius for the HPP nuclear interaction. The default for rncut
     is calculated from the aa, bb, cc, and xpacket parameters. The value cal-
     culated should be large enough that the force between two nucleons separated
     by more than rncut should not register in double precision arithmetic. For
     any reasonable values of the nuclear parameters, this will be no more than
     12 to 15 fermi.

  xmass -- nucleon mass (default: 931.0)



[NOTE: THE g(r) AND S(q) ROUTINES ARE DISABLED IN THIS VERSION.]
The following parameters refer to g(r) and S(q). If g_on=.false., the remaining
parameters do not need to be specified.
  ngofr -- number of time steps between g(r) calculations (default: 0 -- no g(r) calculations)

  nbin -- number of bins for g(r) (no default value)

  nsbin -- number of bins for S(q) (no default value)

  qmin -- minimum value of q for which to compute S(q) (no default value)

  dq -- step in q for computing S(q) (no default value)

  


  bfield  - strength of a uniform external magnetic field (gauss) in the z-direction.
    (default: 0.0)
    Set to zero to turn off magnetic field.


[NOTE: EXTERNAL ELECTRIC FIELD IS DISABLED IN THIS VERSION.]
The following parameters are for application of an external oscillating
E-field. If efield=0.0 the remaining parameters do not need to be specified.
  efield  - amplitude of an oscillating external electric field in
    (default: 0.0)

  q0 -  wave number of E-field (1/fm) (no default value)

  w0 -  frequency of E-field (1/fm) (no default value)

  tref -  time reference for E-field (fm/c) (no default value)



The following parameters are for the screened coulomb interaction.
   coulomb - type of coulomb interaction (no default value)
     'screened-coulomb' - coulomb interaction with exponential screening
         !If a screening length has been specified, use that. Otherwise
         !calculate the Thomas-Fermi screening length.

   xlambda - electron screening length for coulomb interaction (default: -1.0)
     If the user does not enter a value, or enters a negative number, the program 
     will calculate the Thomas-Fermi screening length.

   frp - form factor for coulomb interaction (default: 1.0)

   
   
The following parameters are for the nuclear interaction. They are only
referenced if sim_type='nucleon'.
   nuclear - type of nuclear interaction (no default value)
     'HPP' - Horowitz-Perez-Piekarewicz interaction, Phys.Rev.C69, 045804 (2004)

   xpacket -

   alpha -

   beta -

   c -





File Formats
-----------------------
MD_6.2.0 distinguishes file types by filename extensions. For example, a file
named yukawa_config.xv8b is recognized as a configuration file of type xv8b,
containing double precision positions and velocities. The 'b' character at the
end means it is a "Revision B" type of such a file. Previous versions of the
MD code used a type called simply 'xv8' to hold such data. These are now called
"Revision A", and should have the extension 'xv8a'. The difference between
Rev.A and Rev.B files is that Rev.B have a header containing information about
the configuration, such as potenial and kinetic energies, pressure, pressure
tensor and simulation box dimensions.

Files that MD_6.2.0 creates all have the form "md.xxxxxxxxxxx.*", where the
x's denote an 11-digit timestamp corresponding to the simulation time in fm/c
that the file corresponds to. For example, if the program writes out an xv8b
file at t=302,500,000 fm/c, it will name the file "md.00302500000.xv8b". Thus,
simulation times can go up to 99,999,999,999 fm/c.

type. All files 
md.xxxxxxxxxxx.log
md.xxxxxxxxxxx.meas

There are two types of species files. These files contain charges and masses
of the ions or nucleons.

   ZAfa
   ZAfb

They do not contain positios and velocities. However, the following two types
do contain position, velocity, charge and mass of every particle.

   xvZAfa
   xvZAfb

There are several types of configuration files, i.e., files that contain only
positions and velocities. The program names configuration
files the same way as log and meas files, using an 11-digit time stamp to make
the file name. The type of file is specified by an extension that can be up to
six characters. The types are listed below.

   x4a
   xv4a
   x8a
   xv8a

   x4b
   xv4b
   x8b
   xv8b

   



Definitions of Arrays and Global Variables
--------------------------------------------
real(dble)  x(3,n)
   Cartesian coordinates of particles.
 

 real(dble) xmuc
   Inverse screening length. The screening length is lambda = 1./xmuc

!  2007-Mar-08 (Don Berry) -- Type species has been changed from three integers
!     to an integer and two reals. Charge and mass may not be integers in some
!     applications.



How the OpenMP, MPI and Hybrid Versions Work
----------------------------------------------
